from conans.model import Generator
from conans import ConanFile
import os

class qmake_extra_deps(object):
    def __init__(self, deps_cpp_info):
        self.include_paths = ",\n".join('"%s"' % p.replace("\\", "/")
                                        for p in deps_cpp_info.include_paths)
        self.lib_paths = ",\n".join('"%s"' % p.replace("\\", "/")
                                    for p in deps_cpp_info.lib_paths)
        self.bin_paths = ",\n".join('"%s"' % p.replace("\\", "/")
                                    for p in deps_cpp_info.bin_paths)
        self.libs = ", ".join('"%s"' % p for p in deps_cpp_info.libs)
        self.defines = ", ".join('"%s"' % p for p in deps_cpp_info.defines)
        self.cppflags = ", ".join('"%s"' % p for p in deps_cpp_info.cppflags)
        self.cflags = ", ".join('"%s"' % p for p in deps_cpp_info.cflags)
        self.sharedlinkflags = ", ".join('"%s"' % p for p in deps_cpp_info.sharedlinkflags)
        self.exelinkflags = ", ".join('"%s"' % p for p in deps_cpp_info.exelinkflags)

        self.rootpath = "%s" % deps_cpp_info.rootpath.replace("\\", "/")

class qmake_extra(Generator):
    @property
    def filename(self):
        return "conanbuildinfo-extra.pri"

    @property
    def content(self):
        deps = qmake_extra_deps(self.deps_build_info)

        sections = ["#Generated by QmakeExtra package"]
   
        qml_import_path = []

        for dep_name, dep_cpp_info in self.deps_build_info.dependencies:
            
            deps = qmake_extra_deps(dep_cpp_info)
            qmlPath = os.path.join(deps.rootpath, "qml")
            
            if (os.path.isdir(qmlPath)):
                qml_import_path.append(deps.rootpath)

        template = ("QML_IMPORT_PATH += {qml_import_path}\n")
        sections.append(template.format(qml_import_path = " ".join(qml_import_path)))

        return "\n".join(sections)


class QmakeExtraPackage(ConanFile):
    name = "QmakeExtra"
    version = "0.1"
    url = ""
    license = "MIT"

    def build(self):
        pass

    def package_info(self):
        self.cpp_info.includedirs = []
        self.cpp_info.libdirs = []
        self.cpp_info.bindirs = []
