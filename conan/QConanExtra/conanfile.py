from conans.model import Generator
from conans import ConanFile
import os
import json

class qconanextra_deps(object):
    def __init__(self, deps_cpp_info):
        self.include_paths = ",\n".join('"%s"' % p.replace("\\", "/")
                                        for p in deps_cpp_info.include_paths)
        self.lib_paths = ",\n".join('"%s"' % p.replace("\\", "/")
                                    for p in deps_cpp_info.lib_paths)
        self.bin_paths = ",\n".join('"%s"' % p.replace("\\", "/")
                                    for p in deps_cpp_info.bin_paths)
        self.libs = ", ".join('"%s"' % p for p in deps_cpp_info.libs)
        self.defines = ", ".join('"%s"' % p for p in deps_cpp_info.defines)
        self.cppflags = ", ".join('"%s"' % p for p in deps_cpp_info.cppflags)
        self.cflags = ", ".join('"%s"' % p for p in deps_cpp_info.cflags)
        self.sharedlinkflags = ", ".join('"%s"' % p for p in deps_cpp_info.sharedlinkflags)
        self.exelinkflags = ", ".join('"%s"' % p for p in deps_cpp_info.exelinkflags)

        self.rootpath = "%s" % deps_cpp_info.rootpath.replace("\\", "/")

class qconanextra_header(Generator):
    @property
    def filename(self):
        return "qconanextra.h"
    
    @property 
    def content(self):
        sections = ["#pragma once"]
        for dep_name, dep_cpp_info in self.deps_build_info.dependencies:

            deps = qconanextra_deps(dep_cpp_info)
            path = os.path.join(deps.rootpath, "qconanextra.json")
            print(path)
            try:
                with open(path, 'r') as myfile:
                    data = myfile.read()
                content = json.loads(data);
                flatten = lambda l: [item for sublist in l for item in sublist]
                resources = flatten([content.get("resource")])
                for r in resources:
                    sections.append('Q_INIT_RESOURCE(%s);' % r)
                    
                plugins = flatten([content.get("plugin")])
                for p in plugins:
                    sections.append('Q_IMPORT_PLUGIN(%s);' % p)                
            except IOError:
                pass
            except Exception as e:
                print(e)
                pass        
        return "\n".join(sections)
        
    
class qconanextra_qmake(Generator):
    @property
    def filename(self):
        return "qconanextra.pri"

    @property
    def content(self):
        deps = qconanextra_deps(self.deps_build_info)

        sections = ["#Generated by QConanExtra package"]
   
        qml_import_path = []

        for dep_name, dep_cpp_info in self.deps_build_info.dependencies:
            
            deps = qconanextra_deps(dep_cpp_info)
            qmlPath = os.path.join(deps.rootpath, "qml")
            
            if (os.path.isdir(qmlPath)):
                qml_import_path.append(deps.rootpath)

        template = ("QML_IMPORT_PATH += {qml_import_path}\n")
        sections.append(template.format(qml_import_path = " ".join(qml_import_path)))

        return "\n".join(sections)

class QConanExtraPackage(ConanFile):
    name = "qconanextra"
    version = "0.1"
    url = ""
    license = "MIT"

    def build(self):
        pass

    def package_info(self):
        self.cpp_info.includedirs = []
        self.cpp_info.libdirs = []
        self.cpp_info.bindirs = []
